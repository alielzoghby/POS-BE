{
  "info": {
    "name": "Freelance Management API",
    "description": "Complete API documentation for freelance management system with products, orders, clients, categories, users, and more",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login with email and password to get authentication token. Returns JWT token for subsequent API calls."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": 200,\n  \"message\": \"Login successful\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"user\": {\n      \"user_id\": 1,\n      \"email\": \"admin@example.com\",\n      \"first_name\": \"Admin\",\n      \"last_name\": \"User\",\n      \"role\": \"ADMIN\"\n    }\n  }\n}"
            },
            {
              "name": "Invalid Credentials",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": 401,\n  \"message\": \"Invalid credentials\",\n  \"data\": null\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('token');",
                  "    ",
                  "    // Set token for subsequent requests",
                  "    if (pm.response.json().data.token) {",
                  "        pm.collectionVariables.set('token', pm.response.json().data.token);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Check Authentication",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/authenticated",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "authenticated"
              ]
            },
            "description": "Check if the provided JWT token is valid and get current user information."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Token valid\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('user');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "description": "User management endpoints for admin operations",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/?page=1&limit=10&search=&role=",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by name or email"
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "Filter by role (ADMIN, CASHIER)"
                }
              ]
            },
            "description": "Get paginated list of all users. Supports search and filtering by role."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Users retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('users');",
                  "    pm.expect(pm.response.json().data).to.have.property('pagination');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"password\": \"password123\",\n  \"role\": \"CASHIER\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ""
              ]
            },
            "description": "Create a new user account. Email must be unique. Role defaults to CASHIER if not specified."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"User created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('user_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1"
              ]
            },
            "description": "Get detailed information about a specific user by their ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"User found\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('user_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"Updated Name\",\n  \"role\": \"ADMIN\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1"
              ]
            },
            "description": "Update user information. All fields are optional for partial updates."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"User updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Clients",
      "description": "Client management endpoints",
      "item": [
        {
          "name": "Get All Clients",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/clients/?page=1&limit=10&search=&active=&company=",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "clients",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by name, email, or company"
                },
                {
                  "key": "active",
                  "value": "",
                  "description": "Filter by active status (true/false)"
                },
                {
                  "key": "company",
                  "value": "",
                  "description": "Filter by company name"
                }
              ]
            },
            "description": "Get paginated list of all clients. Supports search and filtering."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Clients retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('clients');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Client",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"M\",\n  \"first_name\": \"Ahmed\",\n  \"last_name\": \"Sayed\",\n  \"email\": \"ahmed@example.com\",\n  \"company\": \"Tech Corp\",\n  \"sales\": 1500,\n  \"active\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/clients/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "clients",
                ""
              ]
            },
            "description": "Create a new client. Email must be unique. Active defaults to true."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Client created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('client_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Client by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/clients/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "clients",
                "1"
              ]
            },
            "description": "Get detailed client information including addresses and phone numbers."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Client found\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('client_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Client",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"Updated Name\",\n  \"company\": \"New Company\",\n  \"active\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/clients/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "clients",
                "1"
              ]
            },
            "description": "Update client information. All fields are optional for partial updates."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Client updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Client",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/clients/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "clients",
                "1"
              ]
            },
            "description": "Delete client. This will also delete associated addresses and phone numbers due to cascade delete."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Client deleted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Categories",
      "description": "Product category management endpoints",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/?page=1&limit=10&search=",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by category name"
                }
              ]
            },
            "description": "Get paginated list of all product categories."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Categories retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('categories');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Category",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/categories/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                ""
              ]
            },
            "description": "Create a new product category. Category name must be unique."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Category created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('category_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Category by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "1"
              ]
            },
            "description": "Get category details including associated products."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Category found\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('category_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Category",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Electronics\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/categories/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "1"
              ]
            },
            "description": "Update category name. Name must remain unique."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Category updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Category",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "1"
              ]
            },
            "description": "Delete category. Cannot delete if products are still associated with this category."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Category deleted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "description": "Product management endpoints with inventory tracking",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/?page=1&limit=10&search=&category_id=&status=&show_online=",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by name, reference, or category"
                },
                {
                  "key": "category_id",
                  "value": "",
                  "description": "Filter by category ID"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by stock status (in stock, out of stock, low stock)"
                },
                {
                  "key": "show_online",
                  "value": "",
                  "description": "Filter by online visibility (true/false)"
                }
              ]
            },
            "description": "Get paginated list of products with comprehensive filtering options."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Products retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('products');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Product",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Premium Product",
                  "description": "Product name (required)",
                  "type": "text"
                },
                {
                  "key": "reference",
                  "value": "PROD001",
                  "description": "Unique product reference (required)",
                  "type": "text"
                },
                {
                  "key": "category_id",
                  "value": "1",
                  "description": "Category ID (required)",
                  "type": "text"
                },
                {
                  "key": "base_price",
                  "value": "99.99",
                  "description": "Base price (required)",
                  "type": "text"
                },
                {
                  "key": "final_price",
                  "value": "89.99",
                  "description": "Final price (required)",
                  "type": "text"
                },
                {
                  "key": "quantity",
                  "value": "100",
                  "description": "Initial stock quantity (required)",
                  "type": "text"
                },
                {
                  "key": "unit",
                  "value": "PIECE",
                  "description": "Unit type (PIECE, KILOGRAM, etc.)",
                  "type": "text"
                },
                {
                  "key": "unit_value",
                  "value": "1",
                  "description": "Unit value (default: 1)",
                  "type": "text"
                },
                {
                  "key": "unit_price",
                  "value": "0",
                  "description": "Unit price (default: 0)",
                  "type": "text"
                },
                {
                  "key": "show_online",
                  "value": "true",
                  "description": "Show online (default: true)",
                  "type": "text"
                },
                {
                  "key": "sub_product",
                  "value": "false",
                  "description": "Is sub-product (default: false)",
                  "type": "text"
                },
                {
                  "key": "status",
                  "value": "in stock",
                  "description": "Stock status",
                  "type": "text"
                },
                {
                  "key": "expiration_date",
                  "value": "2024-12-31",
                  "description": "Expiration date (optional)",
                  "type": "text"
                },
                {
                  "key": "lot",
                  "value": "LOT001",
                  "description": "Lot number (optional)",
                  "type": "text"
                },
                {
                  "key": "image",
                  "description": "Product image file (optional)",
                  "type": "file"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/products/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                ""
              ]
            },
            "description": "Create a new product. Supports image upload. Reference must be unique. Default image is used if no image provided."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('product_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Product by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "1"
              ]
            },
            "description": "Get detailed product information including category and order history."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product found\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('product_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Product Name\",\n  \"final_price\": 79.99,\n  \"quantity\": 150,\n  \"show_online\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/products/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "1"
              ]
            },
            "description": "Update product information. All fields are optional for partial updates."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Product",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "1"
              ]
            },
            "description": "Delete product. Cannot delete if product is used in any orders."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product deleted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Multiple Products",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ids\": [1, 2, 3]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/products/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                ""
              ]
            },
            "description": "Delete multiple products by providing array of IDs. Cannot delete products used in orders."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Products deleted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('deletedCount');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "description": "Order management with automatic inventory tracking",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/?page=1&limit=10&search=&client_id=&minPrice=&maxPrice=",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by reference or client info"
                },
                {
                  "key": "client_id",
                  "value": "",
                  "description": "Filter by client ID"
                },
                {
                  "key": "minPrice",
                  "value": "",
                  "description": "Minimum total price filter"
                },
                {
                  "key": "maxPrice",
                  "value": "",
                  "description": "Maximum total price filter"
                }
              ]
            },
            "description": "Get paginated list of orders with comprehensive filtering options."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Orders retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('orders');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Order with Products",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
                         "body": {
               "mode": "raw",
               "raw": "{\n  \"client_id\": 1,\n  \"products\": [\n    {\n      \"product_id\": 1,\n      \"quantity\": 2,\n      \"price\": 89.99\n    }\n  ],\n  \"voucher_reference\": \"SAVE50\",\n  \"payment_method\": \"CARD\",\n  \"tip\": 15.00,\n  \"paid\": 150.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/with-products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "with-products"
              ]
            },
            "description": "Create order with products. NEW FEATURES: Auto-calculates sub_total, tax, due amount, and paid_status. Validates voucher expiry and usage limits. Automatically deactivates single-use vouchers. Requires authentication."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Order created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('order_id');",
                  "    pm.expect(pm.response.json().data).to.have.property('total_price');",
                  "    pm.expect(pm.response.json().data).to.have.property('sub_total');",
                  "    pm.expect(pm.response.json().data).to.have.property('tax');",
                  "    pm.expect(pm.response.json().data).to.have.property('due');",
                  "    pm.expect(pm.response.json().data).to.have.property('paid_status');",
                  "    pm.expect(pm.response.json().data).to.have.property('created_by');",
                  "    pm.expect(pm.response.json().data).to.have.property('creator');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Empty Order",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": 1,\n  \"voucher_reference\": \"SAVE50\",\n  \"payment_method\": \"CASH\",\n  \"tip\": 5.00,\n  \"paid\": 0.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                ""
              ]
            },
            "description": "Create empty order that can be populated with products later."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Empty order created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('order_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Order by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "1"
              ]
            },
            "description": "Get detailed order information including client details and all products."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Order found\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('order_id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Order",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": 2,\n  \"voucher_reference\": \"SAVE15PERCENT\",\n  \"payment_method\": \"CARD\",\n  \"tip\": 20.00,\n  \"paid\": 200.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/orders/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "1"
              ]
            },
            "description": "Update order details. NEW: Auto-recalculates sub_total, tax, total_price, due amount, and paid_status based on the new paid amount."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Order updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('due');",
                  "    pm.expect(pm.response.json().data).to.have.property('paid_status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Order",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "1"
              ]
            },
            "description": "Delete order and automatically restore product quantities to inventory."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Order deleted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Vouchers",
      "description": "Discount voucher management",
      "item": [
        {
          "name": "Get All Vouchers",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/vouchers/?page=1&limit=10&search=",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "vouchers",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by voucher reference"
                }
              ]
            },
            "description": "Get list of all discount vouchers with search and pagination support."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Vouchers retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Fixed Amount Voucher",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50,\n  \"voucher_reference\": \"SAVE50\",\n  \"active\": true,\n  \"expired_at\": \"2024-12-31T23:59:59Z\",\n  \"multiple\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/vouchers/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "vouchers",
                ""
              ]
            },
            "description": "Create voucher with fixed amount discount. New fields: active (controls if voucher can be used), expired_at (expiration date), multiple (true for multi-use, false for single-use)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Voucher created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('voucher_id');",
                  "    pm.expect(pm.response.json().data).to.have.property('active');",
                  "    pm.expect(pm.response.json().data).to.have.property('multiple');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Percentage Voucher",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"percentage\": 15,\n  \"voucher_reference\": \"SAVE15PERCENT\",\n  \"active\": true,\n  \"expired_at\": \"2024-12-31T23:59:59Z\",\n  \"multiple\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/vouchers/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "vouchers",
                ""
              ]
            },
            "description": "Create percentage-based voucher (1-100%). This example shows a single-use voucher (multiple: false) that expires at year end."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Percentage voucher created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data).to.have.property('voucher_id');",
                  "    pm.expect(pm.response.json().data.multiple).to.equal(false);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Single-Use Voucher",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 25,\n  \"voucher_reference\": \"ONEUSE25\",\n  \"active\": true,\n  \"expired_at\": \"2024-06-30T23:59:59Z\",\n  \"multiple\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/vouchers/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "vouchers",
                ""
              ]
            },
            "description": "Create a single-use voucher (multiple: false) that automatically becomes inactive after first use. Perfect for one-time promotional codes."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Single-use voucher created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().data.multiple).to.equal(false);",
                  "    pm.expect(pm.response.json().data.active).to.equal(true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Configuration",
      "description": "System configuration management",
      "item": [
        {
          "name": "Get Configuration",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/configration/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "configration",
                ""
              ]
            },
            "description": "Get current system configuration including tax rate."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Configuration retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.have.property('tax');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Configuration",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tax\": 15\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/configration/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "configration",
                ""
              ]
            },
            "description": "Update system configuration. Tax rate is percentage (0-100)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Configuration updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Lookup",
      "description": "Lookup data for dropdowns and references",
      "item": [
        {
          "name": "Get Categories Lookup",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/lookup/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "lookup",
                "categories"
              ]
            },
            "description": "Get simplified categories list suitable for dropdown menus and form selects."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Categories lookup retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.json().data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
